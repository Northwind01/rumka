name: data continuous integration
on:
  push:
    branches:
    - main
    # paths:
    # - 'data/**'

jobs:
  # linting
  lint-testing:
    name: code formatting tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Code formatting tests
      working-directory: ${{ github.workspace }}
      run: |
        make lint
  # typing
  type-testing:
    name: type tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: type checking
      working-directory: ${{ github.workspace }}
      run: |
        make types
  # data
  data-validation:
    name: data validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: rasa data validation
      working-directory: ${{ github.workspace }}
      run: |
        rasa data validate --debug
  # training
  training-testing:
    name: testing and retraining
    runs-on: ubuntu-latest
    needs: [data-validation]
    steps:
    - uses: actions/checkout@v1
    - id: files
      uses: jitterbit/get-changed-files@v1
    # prepare
    - name: set_training
      if: |
          contains(  steps.files.outputs.all, 'data/' ) 
          || contains(  steps.files.outputs.all, 'config.yml' ) 
          || contains(  steps.files.outputs.all, 'domain.yml' )
      run: echo "RUN_TRAINING=true"  >> $GITHUB_ENV
    - name: Set up Python 3.7
      if: env.RUN_TRAINING == 'true'
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: install dependencies
      if: env.RUN_TRAINING == 'true'
      run: |
          python -m pip install --upgrade "pip<20"
          pip install -r requirements-dev.txt
          python3 -m spacy download ru_core_news_lg
    # cross-validation
    - name: cross-validate NLU model
      id: cvnlu
      if: |
          ( 
            ( 
              contains( github.event.pull_request.labels.*.name, 'nlu_testing_required' ) 
              && contains(  steps.files.outputs.all, 'data/' ) 
            )
            || contains(  steps.files.outputs.all, 'config.yml' ) 
          )
      run: |  
          rasa test nlu -f 3 --cross-validation
          python .github/workflows/format_results.py
    # - name: post cross-val results to PR
    #   if: steps.cvnlu.outcome == 'success'
    #   uses: amn41/comment-on-pr@comment-file-contents
    #   continue-on-error: true
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     msg: results.md
    # re-training
    - name: train model
      if: env.RUN_TRAINING == 'true'
      working-directory: ${{ github.workspace }}
      run: |
        rasa train
    # testing
    - name: test training stories
      if: |
          contains(  steps.files.outputs.all, 'data/' ) 
          || contains(  steps.files.outputs.all, 'config.yml' ) 
          || contains(  steps.files.outputs.all, 'domain.yml' )
      working-directory: ${{ github.workspace }}
      run: |
        rasa test core --stories test/test_stories.md --fail-on-prediction-errors
    - name: upload model
      if: |
          github.ref == 'refs/heads/main'
          && env.RUN_TRAINING == 'true'
      uses: actions/upload-artifact@main
      with:
        name: model
        path: models
